{% extends "base/wrap.c.j2" %}
{% block headers %}
#include <sys/syscall.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
{{ super() }}
#include "blob.h"

{% endblock %}

{% block main %}
{{ super() }}

#define KB 1024
#define MB (KB * 1024)
#define GB (MB * 1024)

static blob_t *blob = NULL;

__attribute__((constructor))
static void batch_init() {
    blob = blob_new(1 * MB);
}

static void batch_flush() {
    if (! blob_empty(blob)) {
        syscall(SYS_proxy, (void *)blob, NULL);
        blob_reset(blob);
    }
}

static void *batch_alloc(size_t size) {
    return blob_append(blob, size);
}

snd_config_t *snd_config = NULL;

__GLXextFuncPtr glXGetProcAddressARB(const GLubyte *name) {
    {% for func in functions %}
    {% if not func.name.startswith('snd_') %}
    if (strcmp(name, "{{ func.name }}") == 0) {
        return (void *){{ func.name }};
    }
    {% endif %}
    {% endfor %}
    printf("glXGetProcAddress(%s) not found\n", name);
    return NULL;
}

__GLXextFuncPtr glXGetProcAddress(const GLubyte *name) {
    return glXGetProcAddressARB(name);
}
{% endblock %}

{% block definition %}
#if !defined(skip_client_{{ func.name }}) && !defined(skip_index_{{ func.name }})
{{ super() -}}
#endif
{% endblock %}

{% block call %}
    {% set batch = func.void %}
    {% for arg in func.args %}
        {% if '*' in arg.type %}
            {% set batch = false %}
        {% endif %}
    {% endfor %}
{% if batch %}
#ifdef no_batch_{{ func.name }}
{% endif %}
    batch_flush();
{% if batch %}
#endif
{% endif %}
    {{ func.name }}_INDEXED *data = batch_alloc(sizeof({{ func.name }}_INDEXED));
    data->func = {{ func.name }}_INDEX;
    {% for arg in func.args %}
    data->args.a{{ loop.index }} = ({{ arg.type|unconst }}){{ arg.name }};
    {% endfor %}
{% if batch %}
#ifdef no_batch_{{ func.name }}
{% endif %}
    {% if not func.void %}
    {{ func.return }} ret;
    syscall(SYS_proxy, (void *)data, &ret);
    return ret;
    {% else %}
    syscall(SYS_proxy, (void *)data, NULL);
    {% endif %}
    blob_reset(blob);
{% if batch %}
#endif
{% endif %}
{% endblock %}
